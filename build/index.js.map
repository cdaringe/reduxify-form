{"version":3,"sources":["../src/index.js"],"names":["rf","require","reduxFormPropTypes","getFormValues","getFormSyncErrors","getFormSubmitErrors","_getState","formName","state","values","syncErrors","submitErrors","mod","_reduxForm","reduxForm","connect","reduxifyForm","opts","Error","Component","component","propTypes","Object","assign","RFComponent","form","getFormState","formState","getState","bind","init","prop","module","exports"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,YAAR,CAAX;AACA,IAAMC,qBAAqBF,GAAGE,kBAA9B;AACA,IAAMC,gBAAgBH,GAAGG,aAAzB;AACA,IAAMC,oBAAoBJ,GAAGI,iBAA7B;AACA,IAAMC,sBAAsBL,GAAGK,mBAA/B;;AAEA;AACA,IAAMC,YAAY,SAASA,SAAT,CAAoBC,QAApB,EAA8BC,KAA9B,EAAqC;AACrD,SAAO;AACLC,YAAQN,cAAcI,QAAd,EAAwBC,KAAxB,CADH;AAELE,gBAAYN,kBAAkBG,QAAlB,EAA4BC,KAA5B,CAFP;AAGLG,kBAAcN,oBAAoBE,QAApB,EAA8BC,KAA9B;AAHT,GAAP;AAKD,CAND;;AAQA;;;;;;;;;;;;;AAaA,IAAMI,MAAM;AACVC,cAAYb,GAAGc,SADL;AAEVC,WAAS,IAFC;AAGVT,aAAWA,SAHD;AAIVU,gBAAc,sBAAUC,IAAV,EAAgB;AAC5B,QAAI,CAACA,IAAL,EAAW,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AADiB,QAETC,SAFS,GAEeF,IAFf,CAEpBG,SAFoB;AAAA,QAEEb,QAFF,GAEeU,IAFf,CAEEV,QAFF;;AAG5B,QAAI,CAACY,SAAL,EAAgB,MAAM,IAAID,KAAJ,CAAU,wBAAV,CAAN;AAChB,QAAI,CAACX,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAArC,EAA+C,MAAM,IAAIW,KAAJ,CAAU,sBAAV,CAAN;AAC/C,QAAMH,UAAUE,KAAKF,OAAL,IAAgB,KAAKA,OAArC;AACA,QAAI,CAACA,OAAL,EAAc,MAAM,IAAIG,KAAJ,CAAU,2DAAV,CAAN;AACdC,cAAUE,SAAV,GAAsBC,OAAOC,MAAP,CAAcJ,UAAUE,SAAV,IAAuB,EAArC,EAAyCnB,kBAAzC,CAAtB;AACA,QAAMsB,cAAc,KAAKX,UAAL,CAAgB,EAAEY,MAAMlB,QAAR,EAAhB,EAAoCY,SAApC,CAApB;AACA;AACA,WAAOJ,QACL,SAASW,YAAT,CAAuBlB,KAAvB,EAA8B;AAC5B,aAAO;AACLmB,mBAAWV,KAAKW,QAAL,GAAgBX,KAAKW,QAAL,CAAcrB,QAAd,EAAwBC,KAAxB,CAAhB,GAAiD,KAAKF,SAAL,CAAeC,QAAf,EAAyBC,KAAzB;AADvD,OAAP;AAGD,KAJD,CAIEqB,IAJF,CAIO,IAJP,CADK,EAMLL,WANK,CAAP;AAOD,GArBS;AAsBVM,QAAM,SAASA,IAAT,CAAef,OAAf,EAAwB;AAC5B,SAAKA,OAAL,GAAeA,OAAf;AACD;AAxBS,CAAZ;;AA2BA,KAAK,IAAIgB,IAAT,IAAiBnB,GAAjB,EAAsB;AACpB,MAAI,OAAOA,IAAImB,IAAJ,CAAP,KAAqB,UAAzB,EAAqC;AACnCnB,QAAImB,IAAJ,IAAYnB,IAAImB,IAAJ,EAAUF,IAAV,CAAejB,GAAf,CAAZ;AACD;AACF;;AAEDoB,OAAOC,OAAP,GAAiBrB,GAAjB","file":"index.js","sourcesContent":["const rf = require('redux-form')\nconst reduxFormPropTypes = rf.reduxFormPropTypes\nconst getFormValues = rf.getFormValues\nconst getFormSyncErrors = rf.getFormSyncErrors\nconst getFormSubmitErrors = rf.getFormSubmitErrors\n\n/* istanbul ignore next */\nconst _getState = function _getState (formName, state) {\n  return {\n    values: getFormValues(formName)(state),\n    syncErrors: getFormSyncErrors(formName)(state),\n    submitErrors: getFormSubmitErrors(formName)(state)\n  }\n}\n\n/**\n * redux-formify a component.   wraps the component such that form state gets\n * injected into props, and such that `<Field>`s connect to their associated\n * datas in the store.  This method is a replacement for default `reduxForm`\n * call due to bugs with accessing form state.  It also keeps Component's a wee\n * bit tidier, given the nastyness in double wrapping the component export. This\n * method should be removed IFF 2299 is addressed and provides a simple API to\n * get all form state directly into the wrapped Component.\n * {@link https://github.com/erikras/redux-form/issues/2299}\n * @export\n * @param {any} { component: Component, formName, [connect] }\n * @returns {Component}\n */\nconst mod = {\n  _reduxForm: rf.reduxForm,\n  connect: null,\n  _getState: _getState,\n  reduxifyForm: function (opts) {\n    if (!opts) throw new Error('please provide object with Component & formName')\n    const { component: Component, formName } = opts\n    if (!Component) throw new Error('must provide Component')\n    if (!formName || typeof formName !== 'string') throw new Error('must string formName')\n    const connect = opts.connect || this.connect\n    if (!connect) throw new Error('please `init(connect)` or provide `.connect` to your opts')\n    Component.propTypes = Object.assign(Component.propTypes || {}, reduxFormPropTypes)\n    const RFComponent = this._reduxForm({ form: formName })(Component)\n    /* istanbul ignore next */\n    return connect(\n      function getFormState (state) {\n        return {\n          formState: opts.getState ? opts.getState(formName, state) : this._getState(formName, state)\n        }\n      }.bind(this)\n    )(RFComponent)\n  },\n  init: function init (connect) {\n    this.connect = connect\n  }\n}\n\nfor (let prop in mod) {\n  if (typeof mod[prop] === 'function') {\n    mod[prop] = mod[prop].bind(mod)\n  }\n}\n\nmodule.exports = mod\n"]}